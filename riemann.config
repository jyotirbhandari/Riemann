(require '[clojure.string :as string])
(require '[org.spootnik.riemann.thresholds :refer [threshold-check]])
(include "inc/helpers.clj")
(include "inc/thresholds.clj")


(logging/init {:file "/var/log/riemann/riemann.log"})

(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(def default-ttl 30)
(periodically-expire 5)
(def email (mailer {:from "from-email@example.com"}))

(let [index (smap (threshold-check thresholds)
                  (tap :index 
    (where (service #"^memcached-(.)*\/df.+")
      (scale (/ 1 1024 1024)#(info %)(index)))
	(where (not (service #"^memcached-(.)*\/df.+"))
		(index)
 	            (by [:host :service]
			(where (state "critical")
		          (throttle 1 3600
			    (email "to-email@example.net")))))))]			  
			 
  (streams
   (default :ttl default-ttl
      (let [memory-and-load-summary
           (where (or (service #"^load/load/")
                      (service #"^memory/"))
                  index
                  (by :service
                      (coalesce
                       (smap folds/sum
                             (with-but-collectd {:tags ["summary"]
                                                 :ttl default-ttl}
                               index)))))

           distinct-hosts
           (where (not (tagged "summary"))
                  (with :service "distinct hosts"
                        (coalesce
                         (smap folds/count
                               (with-but-collectd {:tags ["summary"]
                                                   :ttl default-ttl
                                                   :state nil}

                                 reinject)))))


           per-host-summaries
           (by [:host]
               (project [(service "cpu-average/cpu-system")
                         (service "cpu-average/cpu-user")]
                        (smap folds/sum
                              (with {:service "cpu-average/cpu-used"
                                     :ttl default-ttl}
                                    index)))

               (project [(service "memory/memory-slab_recl")
                         (service "memory/memory-slab_unrecl")
                         (service "memory/memory-used")
                         (service "memory/memory-free")
                         (service "memory/memory-cached")
                         (service "memory/memory-buffered")]
                        (smap folds/sum
                              (with {:service "memory/memory-total"
                                     :ttl default-ttl
                                     :tags ["summary"]}
                                    reinject)))

               (project [(service "memory/memory-used")
                         (service "memory/memory-total")]
                        (smap folds/quotient
                              (with {:service "memory/percent-used"
                                     :ttl default-ttl}
                                    (float-to-percent index)))))



           clock-skew
           (where (not (nil? host))
                  (clock-skew
                   (with-but-collectd {:service "clock skew"
                                       :tags ["internal"]}
                     (rate 5 index))))]

       (where (not (state "expired"))
              memory-and-load-summary
              distinct-hosts
              per-host-summaries
              clock-skew
              index))
     (expired #(info "Expired" %)))))
